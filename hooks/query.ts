import { getClient } from "@/components/api/client";
import { useQuery } from "react-query";
import { handleError } from "@/components/api/request";
import { CollectionData, topCreatorsData } from "@/@types/collection";

export const fetchCollectionsByProfile = async (): Promise<
  CollectionData[]
> => {
  const client = await getClient();
  const { data } = await client("/profile/uploads");
  return data;
};

export const useFetchCollectionsByProfile = () => {
  return useQuery(["collections"], {
    queryFn: () => fetchCollectionsByProfile(),
    onError: (err) => handleError(err),
  });
};

export const fetchTopCreators = async (): Promise<topCreatorsData[]> => {
  const client = await getClient();
  const { data } = await client("/auth/top-creators");
  return data.topCreators;
};

export const useFetchTopCreators = () => {
  const { data, isLoading, error, isSuccess } = useQuery(["topCreators"], {
    queryFn: () => fetchTopCreators(),
    onError: (err) => console.error(err),
  });
  return {
    data,
    isLoading,
    error,
    isSuccess,
  };
};
export const fetchRecentlyPlayed = async () => {
  const client = await getClient();
  const { data } = await client("/history/recently-played");
  return data.recentlyPlayed;
};

export const useFetchRecentlyPlayed = () => {
  const { data, isLoading, error, isSuccess } = useQuery(["recentlyPlayed"], {
    queryFn: () => fetchRecentlyPlayed(),
    onError: (err) => console.error(err),
  });
  return {
    data,
    isLoading,
    error,
    isSuccess,
  };
};

export const fetchFavorites = async () => {
  const client = await getClient();
  const { data } = await client("/favorite");
  return data.collection;
};

export const useFavorites = () => {
  const { data, isLoading, error, isSuccess } = useQuery(["favorites"], {
    queryFn: () => fetchFavorites(),
    onError: (err) => console.error(err),
  });
  return {
    data,
    isLoading,
    error,
    isSuccess,
  };
};
export const fetchAutogeneratedPlaylist = async () => {
  const client = await getClient();
  const { data } = await client("/profile/auto-generated-playlist");
  return data.playlist;
};

export const useAutogeneratedPlaylist = () => {
  const { data, isLoading, error, isSuccess } = useQuery(
    ["autogeneratedPlaylist"],
    {
      queryFn: () => fetchAutogeneratedPlaylist(),
      onError: (err) => console.error(err),
    }
  );
  return {
    data,
    isLoading,
    error,
    isSuccess,
  };
};
export const fetchRecommended = async () => {
  const client = await getClient();
  const { data } = await client("/profile/recommended");
  return data.collection;
};

export const useFetchRecommendedCollection = () => {
  const { data, isLoading, error, isSuccess } = useQuery(["recommended"], {
    queryFn: () => fetchRecommended(),
    onError: (err) => console.error(err),
  });
  return {
    data,
    isLoading,
    error,
    isSuccess,
  };
};
export const fetchFeeds = async () => {
  const client = await getClient();
  const { data } = await client("/collection/latest-collection");
  return data.collection;
};

export const useFetchFeeds = () => {
  const { data, isLoading, isFetching, error, isSuccess } = useQuery(
    ["feeds"],
    {
      queryFn: () => fetchFeeds(),
      onError: (err) => console.error(err),
    }
  );
  return {
    data,
    isLoading,
    isFetching,
    error,
    isSuccess,
  };
};

export const handleLikeCollection = async (collectionId: string) => {
  const fetchSentLikes = async (collectionId: string) => {
    const client = await getClient();
    const { data } = await client.post(`/${collectionId}/like`);
    return data;
  };
  const { data, isLoading, error, isSuccess } = useQuery(
    ["handleLikeCollection"],
    {
      queryFn: () => fetchSentLikes(collectionId),
      onError: (err) => console.error(err),
    }
  );
  return {
    data,
    isLoading,
    error,
    isSuccess,
  };
};

export const fetchPlaylist = async () => {
  const client = await getClient();
  const { data } = await client("/playlist/by-profile");
  return data.playlist;
};

export const useFetchPlaylist = () => {
  const { data, isLoading, error, isSuccess } = useQuery(
    ["playlist-by-profile"],
    {
      queryFn: () => fetchPlaylist(),
      onError: (err) => console.error(err),
    }
  );
  return {
    data,
    isLoading,
    error,
    isSuccess,
  };
};


// FETch following
export const fetchSinglePlaylist = async (id: string): Promise<boolean[]> => {
  const client = await getClient();
  const { data } = await client("/playlist/" + id);
  return data.list;
};

export const useFetchSinglePlaylist = (id: string) => {
  const { data, isLoading, error, isSuccess, isFetching } = useQuery(
    ["single-Playlist", id],
    {
      queryFn: () => fetchSinglePlaylist(id),
      onError: (err) => console.error("single playlist ", err),
      enabled: id ? true : false,
    }
  );
  return {
    data,
    isLoading,
    error,
    isSuccess,
    isFetching,
  };
};