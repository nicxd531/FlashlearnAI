import {
  getFromAsyncStorage,
  Keys,
  saveToAsyncStorage,
} from "@/utils/asyncStorage";
import client from "./client";
import { toast } from "@backpackapp-io/react-native-toast";
import axios from "axios";
import { FormikHelpers } from "formik";
import {
  updateBusyState,
  updateLoggedInState,
  updateProfile,
} from "@/utils/store/auth";
import { useDispatch } from "react-redux";

interface FetchRecentlyPlayedProps {
  setRecentlyPlayedData: (data: any) => void;
  setError: (error: string) => void;
  setLoading: (loading: boolean) => void;
}
interface FetchAutogeneratedProps {
  setError: (error: string) => void;
  setLoading: (loading: boolean) => void;
  setAutogeneratedPlaylist: (data: any) => void;
}
interface FetchSuggestedCollections {
  setError: (error: string) => void;
  setLoading: (loading: boolean) => void;
  setSuggestedCollections: (data: any) => void;
}
interface FetchFavorites {
  setError: (error: string) => void;
  setLoading: (loading: boolean) => void;
  setFavorites: (data: any) => void;
}

export const fetchRecentlyPlayed = async (props: FetchRecentlyPlayedProps) => {
  const { setRecentlyPlayedData, setError, setLoading } = props;
  try {
    const token = await getFromAsyncStorage(Keys.AUTH_TOKEN);
    if (!token) {
      throw new Error("User is not authenticated. Token is missing.");
    }
    const res = await client.get("/history/recently-played", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    setRecentlyPlayedData(res.data.recentlyPlayed);
    // console.log({ creators });
  } catch (err) {
    setError("Failed to fetch top creators. Please try again later.");
    console.error("Error fetching top creators", err);
  } finally {
    setLoading(false);
  }
};
export const getAutogeneratedPlaylist = async (
  props: FetchAutogeneratedProps
) => {
  const { setAutogeneratedPlaylist, setError, setLoading } = props;
  try {
    const token = await getFromAsyncStorage(Keys.AUTH_TOKEN);
    if (!token) {
      throw new Error("User is not authenticated. Token is missing.");
    }
    const res = await client.get("/profile/auto-generated-playlist", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    setAutogeneratedPlaylist(res.data.playlist);
    // console.log(res.data);
  } catch (err) {
    setError(
      "Failed to fetch auto Generated playlist. Please try again later."
    );
    console.error("Error fetching Generated playlist", err);
  } finally {
    setLoading(false);
  }
};
export const getSuggestedCollections = async (
  props: FetchSuggestedCollections
) => {
  const { setSuggestedCollections, setError, setLoading } = props;
  try {
    const token = await getFromAsyncStorage(Keys.AUTH_TOKEN);
    if (!token) {
      throw new Error("User is not authenticated. Token is missing.");
    }
    const res = await client.get("/collection/suggested-collections", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    setSuggestedCollections(res.data.collections);
  } catch (err) {
    setError("Failed to fetch suggested collection. Please try again later.");
    console.error("Error fetching suggested collection:", err);
  } finally {
    setLoading(false);
  }
};

export const truncateText = (text: string, maxLength: number = 20): string => {
  if (text.length <= maxLength) {
    return text;
  }
  return text.substring(0, maxLength) + "...";
};
export const formatTime = (time: string): string => {
  const date = new Date(time);
  return date.toDateString();
};
export const formatNumber = (number: number): string => {
  return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};
export const formatDuration = (duration: number): string => {
  const minutes = Math.floor(duration / 60);
  const seconds = duration % 60;
  return `${minutes}:${seconds}`;
};
export const formatViews = (views: number): string => {
  if (views < 1000) {
    return views.toString();
  }
  return `${(views / 1000).toFixed(1)}k`;
};
export const formatFollowers = (followers: number): string => {
  if (followers < 1000) {
    return followers.toString();
  }
  return `${(followers / 1000).toFixed(1)}k`;
};

// here Starts Favorites.tsx
export const getFavorites = async (props: FetchFavorites) => {
  const { setFavorites, setError, setLoading } = props;
  try {
    const token = await getFromAsyncStorage(Keys.AUTH_TOKEN);
    if (!token) {
      throw new Error("User is not authenticated. Token is missing.");
    }
    const res = await client.get("/favorite", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    setFavorites(res.data.collection);
  } catch (err) {
    setError("Failed to fetch favorites. Please try again later.");
    console.error("Error fetching favorites", err);
  } finally {
    setLoading(false);
  }
};
// here ends Favorites.tsx
