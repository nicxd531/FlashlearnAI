import React, { useEffect, useState } from "react";
import { View, StyleSheet, Dimensions, Pressable } from "react-native";
import Carousel from "react-native-snap-carousel";
import { ActivityIndicator, Card, Text } from "react-native-paper";
import { backgroundImage, playlistPlaceholder } from "@/constants/Styles";
import { Image } from "react-native-elements";
import PulseAnimationContainer from "./PulseAnimationContainer";
import { useAutogeneratedPlaylist, useFavorites } from "@/hooks/query";
import { CollectionData, FavoritesData } from "@/@types/collection";
import { getSource } from "@/components/api/request";
import AppModal from "@/components/reuseables/AppModal";
import CollectionModal from "@/components/library/CollectionModal";

const { width } = Dimensions.get("window");
const Favorites = () => {
  const [showOptions, setShowOptions] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [showPlaylistModal, setShowPlaylistModal] = useState(false);
  const [showPlayListForm, setShowPlayListForm] = useState(false);
  const [collectionId, setCollectionId] = useState<string>();
  const [selectedCollection, setSelectedCollection] = useState<FavoritesData>();
  const { data: data1 = [], isLoading: loading1 } = useFavorites();
  const { data: data2, isLoading: loading2 } = useAutogeneratedPlaylist();
  const mainData = data1.length > 0 ? data1 : data2;
  const onLongPress = (mainData: FavoritesData) => {
    setShowOptions(true);
    setSelectedCollection(mainData);
  };
  const onPress = (userId: string) => {
    setModalVisible(true);
    setCollectionId(userId);
  };
  const closePlayerModal = () => {
    setModalVisible(false);
  };
  const renderItem = ({ item }: { item: FavoritesData }) => (
    <Pressable
      onPress={() => onPress(item.id)}
      onLongPress={() => onLongPress(item)}
      style={styles.item}
    >
      <View style={styles.overlay} />

      <View style={{ flex: 1, width: 500, height: 240, borderRadius: 20 }}>
        <Image
          PlaceholderContent={<ActivityIndicator />}
          source={getSource(item.poster, playlistPlaceholder)}
          style={styles.poster}
        />
      </View>
      <View style={styles.details}>
        <Text style={styles.title}>{item.title}</Text>
      </View>
    </Pressable>
  );

  const dummyData = new Array(4).fill("");
  if (loading1 || loading2) {
    return (
      <PulseAnimationContainer>
        <View style={styles.container}>
          <View style={styles.dunmmyTitleView} />
          <View style={styles.dummyTopViewContainer}>
            {dummyData.map((_, index) => {
              return <View key={index} style={styles.dummyTopView} />;
            })}
          </View>
        </View>
      </PulseAnimationContainer>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.textContainer}>
        <Text style={styles.titleText}>
          {data1.length > 0 ? "Favorites" : "Autogenerated Playlist"}
        </Text>
      </View>
      <Carousel
        data={mainData}
        renderItem={renderItem}
        sliderWidth={width}
        itemWidth={width * 0.6}
        inactiveSlideScale={0.9}
        inactiveSlideOpacity={0.7}
        containerCustomStyle={{ overflow: "hidden" }}
      />
      <AppModal
        animation
        visible={modalVisible}
        onRequestClose={closePlayerModal}
      >
        {collectionId && <CollectionModal userId={collectionId} />}
      </AppModal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10,
  },
  textContainer: {
    width: "100%",
    padding: 16,
  },
  titleText: {
    fontSize: 20,
    fontWeight: "bold",
  },
  item: {
    flexDirection: "row",
    alignItems: "center",

    marginVertical: 8,
    borderRadius: 8,
    height: 200,
    position: "relative",
  },
  poster: {
    width: "100%",
    height: "100%",
    borderRadius: 20,
  },
  details: {
    flex: 1,
    marginLeft: 10,
    top: 150,
    justifyContent: "center",
    position: "absolute",
  },
  title: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#fff",
  },
  description: {
    fontSize: 14,
    color: "#666",
  },
  dunmmyTitleView: {
    height: 30,
    width: 150,
    backgroundColor: "white",
    marginBottom: 10,
    borderRadius: 16,
  },
  dummyTopView: {
    height: 150,
    width: 250,
    backgroundColor: "white",
    marginRight: 10,
    borderRadius: 16,
  },
  dummyTopViewContainer: {
    flexDirection: "row",
  },
  overlay: {
    width: "100%",
    height: "100%",
    position: "absolute",
    right: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)", // Semi-transparent black
  },
});

export default Favorites;
